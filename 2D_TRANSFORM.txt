#include <GL/freeglut.h>
#include <math.h>
#include <time.h>
#include <iostream>
using namespace std;

void delay(unsigned int msecond) {
    clock_t goal = msecond + clock();
    while (goal > clock());
}
void myInit(void) {
    glClearColor(1.0, 0.3, 0.3, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 500, 0, 500);
    glClear(GL_COLOR_BUFFER_BIT);
    glFlush();
}
void drawRect(int a, int b) {
    glPointSize(1.0);
    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_LINE_LOOP);
    glVertex2f(a, b);
    glVertex2f(a, a);
    glVertex2f(b, a);
    glVertex2f(b, b);
    glEnd();
    glFlush();
}
void translateRect(int px, int py, int tx, int ty) {
    glColor3f(0.0, 0.0, 0.0);
    drawRect(px, py);
    delay(500);
    px = px + tx;
    py = py + ty;
    glColor3f(0.0, 0.0, 0.0);
    drawRect(px, py);
    delay(500);
    glFlush();
}
void scaleRect(int px, int py, int sx, int sy) {
    int fx, fy;
    glColor3f(1.0, 1.0, 1.0);
    drawRect(px, py);
    delay(500);
    fx = px * sx;
    fy = py * sy;
    glColor3f(0.5, 0.0, 0.3);
    drawRect(fx, fy);
    glFlush();
}
void rotateRect(int px, int py, int cx, int cy) {
    float theta = 45.0;
    int xf, yf;
    glColor3f(0.0, 0.0, 1.0);
    drawRect(px, py);
    delay(500);
    theta = theta * 3.14 / 180.0;
    xf = cx + (int)((float)(px - cx) * cos(theta)) - ((float)(py - cy) * sin(theta));
    yf = cy + (int)((float)(px - cx) * sin(theta)) + ((float)(py - cy) * cos(theta));
    cout << "\n rotation points:" << xf << " : " << yf;
    glColor3f(0.0, 0.0, 0.0);
    drawRect(xf, yf);
    glFlush();
}
void myDisplay(void) {
    int opt;
    drawRect(100, 200);
    // cout<<"\nEnter\n\t<1> for translation"
    // 	"\n\t<2> for rotation"
    // 	"\n\t<3> for scaling\n\t:";
    // cin >> opt;
    opt = 2;
    switch (opt) {
    case 1:
        translateRect(100, 200, 50, 50);
        break;
    case 2:
        rotateRect(100, 200, 150, 150);
        break;
    case 3:
        scaleRect(100, 200, 2, 2);
        break;
    }
}
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(100, 150);
    glutCreateWindow("Transforming point");
    glutDisplayFunc(myDisplay);
    myInit();
    glutMainLoop();
}