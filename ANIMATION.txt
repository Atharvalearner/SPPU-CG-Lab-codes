#include <GL/glut.h>
#include <GL/gl.h>
#include <math.h>
#define WIDTH 640
#define HEIGHT 480

int k = 20;
int r = 100, flag = 0;
void init(void) {
    glOrtho(-WIDTH / 2, WIDTH / 2 - 1, -HEIGHT / 2, HEIGHT / 2 - 1, -1, 1);
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glPointSize(2.0);
}
void Timer(int ex) {
    glutPostRedisplay();
    glutTimerFunc(30, Timer, 0);
}
void circle(int p, int m) {
    int x = 0, y, d, r;
    r = m;
    y = r;
    d = 3 - 2 * r;
    while (x <= y) {
        glVertex2i(x, y + p);
        glVertex2i(y, x + p);
        glVertex2i(-x, y + p);
        glVertex2i(-y, x + p);
        glVertex2i(-x, -y + p);
        glVertex2i(-y, -x + p);
        glVertex2i(y, -x + p);
        glVertex2i(x, -y + p);
        if (d < 0)
            d = d + 4 * x + 6;
        else {
            d = d + 4 * (x - y) + 10;
            y--;
        }
        x++;
    }
}
void display(void) {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glColor4f(0.0, 1.0, 1.0, 1.0);
    glBegin(GL_POINTS);
    circle(k, r);
    if (flag == 0) {
        if ((k + r) <= 240) {
            k = k + 10;
        }
        if ((k + r) >= 240) {
            flag = 1;
        }
    }
    if (flag == 1) {
        k = k - 10;
        if ((k - r) <= -240) {
            flag = 0;
            if (r != 10)
                r = r - 10;
        }
    }
    glEnd();
    glutSwapBuffers();
}
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGBA);
    glutInitWindowPosition(0, 0);
    glutInitWindowSize(WIDTH, HEIGHT);
    glutCreateWindow("animation");
    init();
    glutDisplayFunc(display);
    glutTimerFunc(0, Timer, 0);
    glutMainLoop();
    return(1);
}